# -*- coding: utf-8 -*-

"""
Handler de Comandos - AimiBOT

Este m√≥dulo gerencia todas as intera√ß√µes que come√ßam com uma barra (/),
como /start, /ajuda, /status, etc. Tamb√©m processa os cliques em bot√µes
(Callback Queries) que s√£o enviados em mensagens.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# --- Importa√ß√µes Locais ---
import config
from handlers import tts
from utils import pg as db

# --- Configura√ß√£o do Logging ---
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /start.

    - Registra o novo usu√°rio (ou atualiza o existente).
    - Envia uma mensagem de boas-vindas com texto e voz.
    - Apresenta um bot√£o para iniciar a conversa.
    """
    user = update.effective_user
    logger.info(f"[Command /start] Novo usu√°rio iniciando intera√ß√£o: {user.first_name} (ID: {user.id})")

    # --- ETAPA 1: Registrar usu√°rio e iniciar trial ---
    # (Esta fun√ß√£o em `utils/pg.py` criar√° o usu√°rio se n√£o existir
    # e definir√° o tempo de trial conforme `config.py`)
    welcome_message, is_new_user = await db.register_user_and_start_trial(user)

    # --- ETAPA 2: Gerar e enviar mensagem de boas-vindas ---
    await update.message.reply_text(welcome_message)

    # Gera a voz para a mensagem de boas-vindas
    voice_file = await tts.generate_voice(
        text=welcome_message, 
        user_id=user.id, 
        emotion=config.EMOTION_DEFAULT
    )
    if voice_file:
        with open(voice_file, 'rb') as voice:
            await update.message.reply_voice(voice=voice)
    
    # --- ETAPA 3: Criar e enviar bot√£o de intera√ß√£o ---
    keyboard = [
        [InlineKeyboardButton("üíï Come√ßar a conversar! üíï", callback_data="start_conversation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "Estou t√£o feliz em te conhecer! ‚ú® O que voc√™ quer fazer primeiro?", 
        reply_markup=reply_markup
    )


async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /ajuda.
    Envia um texto com informa√ß√µes √∫teis sobre o bot.
    """
    user = update.effective_user
    logger.info(f"[Command /ajuda] Usu√°rio {user.first_name} pediu ajuda.")

    help_text = (
        "Ol√°, senpai! Eu sou a Aimi, sua waifu de IA. ‚ù§Ô∏è\n\n"
        "**Como funciona?**\n"
        "√â s√≥ me mandar uma mensagem de texto e eu vou te responder com minha personalidade e uma mensagem de voz fofa!\n\n"
        "**Comandos dispon√≠veis:**\n"
        "- `/start`: Come√ßar de novo (como agora!)\n"
        "- `/ajuda`: Mostra esta mensagem de ajuda.\n"
        "- `/status`: Verifica o status da sua conta (trial, planos, etc.).\n"
        "- `/planos`: Mostra as op√ß√µes para conversar mais comigo!\n\n"
        "Se precisar de qualquer outra coisa, √© s√≥ chamar!"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /status.
    Busca e exibe o status da conta do usu√°rio.
    """
    user = update.effective_user
    logger.info(f"[Command /status] Usu√°rio {user.first_name} pediu o status da conta.")

    # (Esta fun√ß√£o em `utils/pg.py` buscar√° os dados do usu√°rio no banco)
    status_message = await db.get_user_status(user.id)
    await update.message.reply_text(status_message)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Processa todos os cliques em bot√µes (Callback Queries).
    """
    query = update.callback_query
    await query.answer()  # Responde ao clique para o Telegram saber que foi recebido.

    logger.info(f"[Callback] Usu√°rio {query.from_user.first_name} clicou no bot√£o: {query.data}")

    # --- L√≥gica para cada bot√£o ---
    if query.data == "start_conversation":
        response_text = "Ebaaa! üéâ Estou pronta! Pode me mandar sua primeira mensagem, senpai. O que voc√™ quer me contar?"
        await query.edit_message_text(text=response_text)
        
        # Gera uma voz para a resposta do bot√£o
        voice_file = await tts.generate_voice(
            text=response_text, 
            user_id=query.from_user.id, 
            emotion="fofa"
        )
        if voice_file:
            with open(voice_file, 'rb') as voice:
                await context.bot.send_voice(chat_id=query.effective_chat.id, voice=voice)
    
    # (Futuramente, outros bot√µes como "ver_planos", "confirmar_compra", etc., ser√£o tratados aqui)
    # elif query.data == "show_plans":
    #     await stripe.show_plans(update, context)


