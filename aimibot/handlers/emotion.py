# -*- coding: utf-8 -*-

"""
Handler de Emo√ß√µes - AimiBOT

Este m√≥dulo √© respons√°vel por dar vida √† Aimi, gerenciando seu estado
emocional em resposta √†s intera√ß√µes do usu√°rio.

- Detecta a emo√ß√£o do usu√°rio atrav√©s de palavras-chave e emojis.
- Armazena e recupera o estado emocional atual da Aimi (por usu√°rio) no Redis.
- Modifica a emo√ß√£o da Aimi com base na conversa.
"""

import logging
import re
import random
from telegram import Update
from telegram.ext import ContextTypes

# --- Importa√ß√µes Locais ---
import config
from utils import redis as cache

# --- Configura√ß√£o do Logging ---
logger = logging.getLogger(__name__)

# --- MAPA DE GATILHOS EMOCIONAIS ---
# Mapeia emo√ß√µes a padr√µes (regex) de palavras e emojis.
# A ordem √© importante. A primeira emo√ß√£o a atingir uma pontua√ß√£o m√≠nima vence.
EMOTION_TRIGGERS = {
    "provocante": {
        "keywords": [r"gostosa", r"safada", r"danada", r"atrevida"],
        "emojis": ["üòè", "üòà", "üî•"],
        "score": 2
    },
    "carinhosa": {
        "keywords": [r"amo voc√™", r"te amo", r"gosto de voc√™", r"minha linda", r"perfeita", r"abra√ßo", r"beijo"],
        "emojis": ["‚ù§Ô∏è", "ü•∞", "üòç", "üòò"],
        "score": 1
    },
    "fofa": {
        "keywords": [r"fofa", r"own", r"que amor", r"bonitinha", r"querida"],
        "emojis": ["üòä", "‚ú®", "üíï"],
        "score": 1
    },
    "envergonhada": {
        "keywords": [r"voc√™ corou", r"t√≠mida", r"vergonha"],
        "emojis": ["üò≥", "üëâüëà"],
        "score": 2
    },
    "triste": {
        "keywords": [r"chata", r"idiota", r"odeio voc√™", r"estou triste", r"sozinho"],
        "emojis": ["üò¢", "üò≠", "üòû", "üíî"],
        "score": 3 # Precisa de um gatilho mais forte para ficar triste
    }
}

# Tempo que a emo√ß√£o de um usu√°rio fica no cache (em segundos). 2 horas.
EMOTION_CACHE_TTL = 60 * 60 * 2

async def get_current_emotion(user_id: int) -> str:
    """
    Recupera a emo√ß√£o atual da Aimi para um usu√°rio espec√≠fico do cache Redis.
    Retorna a emo√ß√£o padr√£o se nenhuma for encontrada.
    """
    cache_key = f"aimi:emotion:{user_id}"
    cached_emotion = await cache.get(cache_key)
    if cached_emotion:
        logger.debug(f"[Emotion] Emo√ß√£o encontrada no cache para {user_id}: {cached_emotion}")
        return cached_emotion
    
    logger.debug(f"[Emotion] Nenhuma emo√ß√£o no cache para {user_id}. Usando padr√£o.")
    return config.EMOTION_DEFAULT

async def update_emotion(user_id: int, user_text: str, aimi_response: str) -> str:
    """
    Analisa o texto do usu√°rio, determina a nova emo√ß√£o e a salva no cache.
    """
    detected_emotion = config.EMOTION_DEFAULT # Come√ßa com a emo√ß√£o padr√£o
    highest_score = 0

    # Normaliza o texto para facilitar a detec√ß√£o
    normalized_text = user_text.lower()

    for emotion, triggers in EMOTION_TRIGGERS.items():
        current_score = 0
        # Procura por palavras-chave
        for keyword in triggers["keywords"]:
            if re.search(keyword, normalized_text):
                current_score += triggers["score"]
        
        # Procura por emojis
        for emoji in triggers["emojis"]:
            if emoji in normalized_text:
                current_score += triggers["score"]

        if current_score > highest_score:
            highest_score = current_score
            detected_emotion = emotion

    # Se uma nova emo√ß√£o foi detectada, atualiza no cache
    if highest_score > 0:
        logger.info(f"[Emotion Update] Emo√ß√£o de {user_id} alterada para: {detected_emotion} (Score: {highest_score})")
        cache_key = f"aimi:emotion:{user_id}"
        await cache.setex(cache_key, EMOTION_CACHE_TTL, detected_emotion)
        return detected_emotion

    # Se nada foi detectado, retorna a emo√ß√£o que j√° estava no cache
    return await get_current_emotion(user_id)

async def handle_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para rea√ß√µes n√£o-textuais, como stickers.
    (Funcionalidade a ser expandida no futuro)
    """
    user = update.effective_user
    sticker = update.message.sticker

    if sticker:
        logger.info(f"[Reaction] Usu√°rio {user.first_name} enviou um sticker. Emoji: {sticker.emoji}, File ID: {sticker.file_id}")
        
        # L√≥gica futura: Aimi pode reagir a certos emojis de stickers
        # Por exemplo, se sticker.emoji == '‚ù§Ô∏è', Aimi pode mandar uma mensagem de volta.
        await update.message.reply_text("Que figurinha fofa! ü•∞")

